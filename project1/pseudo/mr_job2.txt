map(csvFiles):
    for row in csvFiles:
        row = row.strip().split(',')
        
        # Skip headers
        if "ticker" in row.ticker:
            continue

        # Rows from legend have 5 fields, rows from history have 8
        if len(row) == 8 and (row.date < “2004-01-01” or row.date > “2018-12-31”):
            continue
     
        if len(row) == 5 :
            print(row.ticker, 0, row.sector)
        if len(row == 8):
            print(row.ticker, 1, [row.price_close, row.volume, row.date])


reduce(mappedInput):
    # Initialize current ticker
    current_ticker = None

    for row in mappedInput:
        ticker, flag, value = row.split('\t')

        # Ticker has changed
        if current_ticker != ticker:
            current_ticker = ticker
            sector = value if flag==0 else "N/A" # Handle null values

        # Extract values and send output
        if flag==1:
            print(sector, row.date_created, [row.price_close, row.volume])

    # Handle last line separately
    print(sector, row.date_created, [row.price_close, row.volume])


map_copy(reducedInput):
    for row in reducedInput:
        print(row.strip())


reduce(mappedInput):
    # Initialize current sector, year and date
    curr_sector = None
    curr_year = None
    curr_date = None

    # Initialize YearMetrics
    daily_prices_sums = []
    daily_price = 0
    tot_volume = 0

    # Main loop
    for row in mappedInput:
        sector, date_created, details = row.split('\t')
        year = date_created.year

        # Day has changed
        if curr_date != date_created:
            if curr_date:
                # Update YearMetrics at end of day
                daily_prices_sums.append(daily_price)
                daily_price = 0

            # Change current day
            curr_date = date_created

            # Year has changed
            if curr_year != year:
                if curr_year:
                    # Finalize YearMetrics
                    initial_price = first(daily_prices_sums)
                    final_price = last(daily_prices_sums)
                    growth = calculateGrowth(initial_price, final_price)
                    avg_daily_price = round(mean(daily_prices_sums), 4)

                    # Print sector, year and YearMetrics
                    print(curr_sector, curr_year, [tot_volume, growth, avg_daily_price])

                # Change current year
                curr_year = year

                '''Re-initialize YearMetrics'''

                # Sector has changed
                if curr_sector != sector:
                    # Change current sector
                    curr_sector = sector

        # Update YearMetrics for each entry in day
        daily_price += details.price
        tot_volume += details.volume

    # Handle last line separately
   '''Finalize YearMetrics''' 
   '''Print sector, year and YearMetrics''' 