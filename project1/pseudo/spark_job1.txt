def filter_period(row):
    return "1998-01-01" <= row.date <= "2018-12-31"

def select_columns(row):
    return (row.ticker, 
            Row(price_close=row.close,
                price_low=row.low,
                price_high=row.high,
                volume=row.volume,
                date_created=row.date))

def run_job(history_rdd, legend_rddw):
    # Prefilter and field extraction
    rdd = rdd.filter(filter_period) \
        .map(select_columns)

    ''' Divide et impera '''

    # Calculate min_price
    minprice_rdd = rdd.map(lambda row: (row[0], row[1].price_low)) \
        .reduceByKey(min) \
        .mapValues(lambda x: round(x, 4)) \
        .cache()

    # Calculate max_price
    maxprice_rdd = rdd.map(lambda row: (row[0], row[1].price_high)) \
        .reduceByKey(max) \
        .mapValues(lambda x: round(x, 4)) \
        .cache()

    # Calculate avg_volume
    # Initialize accumulator (runningSum, runningCount)
    avgvol_acc = (0, 0)
    avgvol_rdd = rdd.map(lambda row: (row[0], row[1].volume)) \
        .aggregateByKey(avgvol_acc,
                        lambda acc, x: (acc[0] + x, acc[1] + 1),
                        lambda acc_a, acc_b: (acc_a[0] + acc_b[0], acc_a[1] + acc_b[1])) \
        .mapValues(lambda acc: round(acc[0]/acc[1], 4)) \
        .cache()

    # Calculate growth
    # Initialize accumulator ((initial_date, initial_price),(final_date, final_price))
    growth_acc_initial = (MAX_DATE, 0)
    growth_acc_final = (MIN_DATE, 0)
    growth_rdd = rdd.map(lambda row: (row[0], (row[1].date_created, row[1].price_close))) \
        .aggregateByKey((growth_acc_initial, growth_acc_final),
                        utils.update_growth_acc,
                        utils.combine_growth_accs) \
        .mapValues(utils.calculate_growth) \
        .cache()

    ''' Join '''

    min_max_rdd = minprice_rdd.join(maxprice_rdd)
    min_max_avgvol_rdd = min_max_rdd.join(avgvol_rdd) \
        .mapValues(lambda value: (value[0][0], value[0][1], value[1]))  # First flatten 
    metrics_rdd = min_max_avgvol_rdd.join(growth_rdd) \
        .mapValues(lambda value: # Final flatten
            Row(growth=value[1],
                min_price=value[0][0],
                max_price=value[0][1],
                avg_volume=value[0][2],
                )) \
        .cache()

    # Create ranking of tickers by growth
    ranked_rdd = metrics_rdd.sortBy(lambda row: row[1].growth, ascending=False) \
        .mapValues(pretty_print) \
        .take(10)